#include <iostream>  
#include <vector>   

using namespace std;

int main() {
    int M;          
    cin >> M;       

    vector<int> testCases(M); // Store all test case values
    int maxN = 0;             // Track the largest n value for optimization

    // Read each test case value
    for (int i = 0; i < M; ++i) {
        cin >> testCases[i];

        // Keep track of the maximum n we need to calculate
        if (testCases[i] > maxN) {
            maxN = testCases[i];
        }
    }

    // Create a vector to store Fibonacci numbers up to maxN
    // Use long long to safely handle large values like F(45)
    vector<long long> fib(maxN + 1); 

    // Base cases
    fib[1] = 1;
    if (maxN >= 2) fib[2] = 1;

    // Fill the Fibonacci array using bottom-up DP approach
    for (int i = 3; i <= maxN; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    // Output the result for each test case
    for (int i = 0; i < M; ++i) {
        cout << fib[testCases[i]] << endl;
    }

    return 0;
}
